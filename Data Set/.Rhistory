library(MASS)
library(mvtnorm)
set.seed(1234)
dataYes<-mvrnorm(30,c(10,10),matrix(c(1,.8,.8,1),2,2,byrow=T))
dataNo<- mvrnorm(30,c(10,7),matrix(c(1,.8,.8,1),2,2,byrow=T))
full<-rbind(dataYes,dataNo)
full<-data.frame(full)
full$Response<-rep(c("Yes","No"),each=30)
full$Response<-factor(full$Response)
names(full)[1:2]<-c("X1","X2")
plot(full[, 1:2], col = full$Response, main="Shift in X2")
# construct the LDA model
mylda <- lda(Response ~ X1 + X2, data = full)
# draw discrimination line
np <- 300
nd.x <- seq(from = min(full$X1), to = max(full$X1), length.out = np)
nd.y <- seq(from = min(full$X2), to = max(full$X2), length.out = np)
nd <- expand.grid(X1 = nd.x, X2 = nd.y)
prd <- as.numeric(predict(mylda, newdata = nd)$class)
plot(full[, 1:2], col = full$Response, main="Shift in X2")
points(mylda$means, pch = "+", cex = 2, col = c("black", "red"))
contour(x = nd.x, y = nd.y, z = matrix(prd, nrow = np, ncol = np),
levels = c(1, 2), add = TRUE, drawlabels = FALSE)
dataYes<-mvrnorm(30,c(10,10),matrix(c(1,.6,.6,1),2,2,byrow=T))
dataNo<- mvrnorm(30,c(8,8),matrix(c(1,.6,.6,1),2,2,byrow=T))
full<-rbind(dataYes,dataNo)
full<-data.frame(full)
full$Response<-rep(c("Yes","No"),each=30)
full$Response<-factor(full$Response)
names(full)[1:2]<-c("X1","X2")
mylda <- lda(Response ~ X1 + X2, data = full)
# draw discrimination line
np <- 300
nd.x <- seq(from = min(full$X1), to = max(full$X1), length.out = np)
nd.y <- seq(from = min(full$X2), to = max(full$X2), length.out = np)
nd <- expand.grid(X1 = nd.x, X2 = nd.y)
prd <- as.numeric(predict(mylda, newdata = nd)$class)
plot(full[, 1:2], col = full$Response, main="Shift in X2")
points(mylda$means, pch = "+", cex = 2, col = c("black", "red"))
contour(x = nd.x, y = nd.y, z = matrix(prd, nrow = np, ncol = np),
levels = c(1, 2), add = TRUE, drawlabels = FALSE)
?lds
?lda
full
# construct the LDA model
mylda <- lda(Response ~ X1 + X2, data = full,prior=c(0.8,0.2))
np <- 300
nd.x <- seq(from = min(full$X1), to = max(full$X1), length.out = np)
nd.y <- seq(from = min(full$X2), to = max(full$X2), length.out = np)
nd <- expand.grid(X1 = nd.x, X2 = nd.y)
prd <- as.numeric(predict(mylda, newdata = nd)$class)
plot(full[, 1:2], col = full$Response, main="Shift in X2")
points(mylda$means, pch = "+", cex = 2, col = c("black", "red"))
contour(x = nd.x, y = nd.y, z = matrix(prd, nrow = np, ncol = np),
levels = c(1, 2), add = TRUE, drawlabels = FALSE)
str(full$Response)
full$Response
# construct the LDA model with prior of 0.8 to Yes outcome
# Levels: No Yes, prior should be specified in the order of the vactor levels
mylda <- lda(Response ~ X1 + X2, data = full,prior=c(0.2,0.8))
np <- 300
nd.x <- seq(from = min(full$X1), to = max(full$X1), length.out = np)
nd.y <- seq(from = min(full$X2), to = max(full$X2), length.out = np)
nd <- expand.grid(X1 = nd.x, X2 = nd.y)
prd <- as.numeric(predict(mylda, newdata = nd)$class)
plot(full[, 1:2], col = full$Response, main="Incorporating Prior of Yes to 80%")
points(mylda$means, pch = "+", cex = 2, col = c("black", "red"))
contour(x = nd.x, y = nd.y, z = matrix(prd, nrow = np, ncol = np),
np <- 300
nd.x <- seq(from = min(full$X1), to = max(full$X1), length.out = np)
nd.y <- seq(from = min(full$X2), to = max(full$X2), length.out = np)
nd <- expand.grid(X1 = nd.x, X2 = nd.y)
prd <- as.numeric(predict(mylda, newdata = nd)$class)
plot(full[, 1:2], col = full$Response, main="Incorporating Prior of Yes to 80%")
points(mylda$means, pch = "+", cex = 2, col = c("black", "red"))
contour(x = nd.x, y = nd.y, z = matrix(prd, nrow = np, ncol = np),
levels = c(1, 2), add = TRUE, drawlabels = FALSE)
set.seed(1234)
dataYes<-mvrnorm(30,c(10,10),matrix(c(1,.8,.8,1),2,2,byrow=T))
dataNo<- mvrnorm(30,c(10,7),matrix(c(1,.8,.8,1),2,2,byrow=T))
full<-rbind(dataYes,dataNo)
full<-data.frame(full)
full$Response<-rep(c("Yes","No"),each=30)
full$Response<-factor(full$Response)
names(full)[1:2]<-c("X1","X2")
plot(full[, 1:2], col = full$Response, main="Shift in X2")
full
mylda <- lda(Response ~ X1 + X2, data = full)
# draw discrimination line
np <- 300
nd.x <- seq(from = min(full$X1), to = max(full$X1), length.out = np)
nd.y <- seq(from = min(full$X2), to = max(full$X2), length.out = np)
nd <- expand.grid(X1 = nd.x, X2 = nd.y)
prd <- as.numeric(predict(mylda, newdata = nd)$class)
plot(full[, 1:2], col = full$Response, main="Shift in X2")
points(mylda$means, pch = "+", cex = 2, col = c("black", "red"))
contour(x = nd.x, y = nd.y, z = matrix(prd, nrow = np, ncol = np),
levels = c(1, 2), add = TRUE, drawlabels = FALSE)
full$Response
dataYes<-mvrnorm(30,c(10,10),matrix(c(1,.6,.6,1),2,2,byrow=T))
dataNo<- mvrnorm(30,c(8,8),matrix(c(1,.6,.6,1),2,2,byrow=T))
full<-rbind(dataYes,dataNo)
full<-data.frame(full)
full$Response<-rep(c("Yes","No"),each=30)
full$Response<-factor(full$Response)
names(full)[1:2]<-c("X1","X2")
# construct the LDA model with prior of 0.8 to Yes outcome
# Levels: No Yes, prior should be specified in the order of the factor levels
mylda <- lda(Response ~ X1 + X2, data = full,prior=c(0.2,0.8))
# draw discrimination line
np <- 300
nd.x <- seq(from = min(full$X1), to = max(full$X1), length.out = np)
nd.y <- seq(from = min(full$X2), to = max(full$X2), length.out = np)
nd <- expand.grid(X1 = nd.x, X2 = nd.y)
prd <- as.numeric(predict(mylda, newdata = nd)$class)
plot(full[, 1:2], col = full$Response, main="Incorporating Prior of Yes to 80%")
points(mylda$means, pch = "+", cex = 2, col = c("black", "red"))
contour(x = nd.x, y = nd.y, z = matrix(prd, nrow = np, ncol = np),
levels = c(1, 2), add = TRUE, drawlabels = FALSE)
full[61,1]<-11
full[61,2]<-0
full[61,3]<-"Yes"
mylda <- lda(Response ~ X1 + X2, data = full)
# draw discrimination line
np <- 300
nd.x <- seq(from = min(full$X1), to = max(full$X1), length.out = np)
nd.y <- seq(from = min(full$X2), to = max(full$X2), length.out = np)
nd <- expand.grid(X1 = nd.x, X2 = nd.y)
prd <- as.numeric(predict(mylda, newdata = nd)$class)
plot(full[, 1:2], col = full$Response, main="Shift in X2")
points(mylda$means, pch = "+", cex = 2, col = c("black", "red"))
contour(x = nd.x, y = nd.y, z = matrix(prd, nrow = np, ncol = np),
levels = c(1, 2), add = TRUE, drawlabels = FALSE)
library(mvtnorm)
set.seed(1234)
muYes<-c(10,10)
muNo<-c(8,8)
Sigma<-matrix(c(1,.8,.8,1),2,2,byrow=T)
nY<-30
nN<-30
dataYes<-rmvnorm(nY,muYes,Sigma)
dataNo<- rmvnorm(nN,muNo,Sigma)
train<-rbind(dataYes,dataNo)
train<-data.frame(train)
for (i in 3:20){
train<-cbind(train,rnorm(nY+nN))
}
names(train)<-paste("X",1:20,sep="")
train$Response<-rep(c("Yes","No"),each=30)
train$Response<-factor(train$Response)
#Creating a test set
muYes<-c(10,10)
muNo<-c(8,8)
Sigma<-matrix(c(1,.8,.8,1),2,2,byrow=T)
nY<-500
nN<-500
dataYes<-rmvnorm(nY,muYes,Sigma)
dataNo<- rmvnorm(nN,muNo,Sigma)
test<-rbind(dataYes,dataNo)
test<-data.frame(test)
for (i in 3:20){
test<-cbind(test,rnorm(nY+nN))
}
names(test)<-paste("X",1:20,sep="")
test$Response<-rep(c("Yes","No"),each=500)
test$Response<-factor(test$Response)
mylda<-lda(Response~X1+X2,data=train)
pred<-predict(mylda,newdata=test)$class  #Predictions can come in many forms, the class form provides the categorical level of your response.
Truth<-test$Response
x<-table(pred,Truth) # Creating a confusion matrix
x
#Missclassification Error
ME<-(x[2,1]+x[1,2])/1000
ME
#Calculating overall accuracy
1-ME
mylda<-lda(Response~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10,data=train)
pred<-predict(mylda,newdata=test)$class  #Predictions can come in many forms, the class form provides the categorical level of your response.
Truth<-test$Response
x<-table(pred,Truth) # Creating a confusion matrix
x
#Missclassification Error
ME<-(x[2,1]+x[1,2])/1000
ME
#Calculating overall accuracy
1-ME
mylda<-lda(Response~.,data=train)
pred<-predict(mylda,newdata=test)$class  #Predictions can come in many forms, the class form provides the categorical level of your response.
Truth<-test$Response
x<-table(pred,Truth) # Creating a confusion matrix
x
#Missclassification Error
ME<-(x[2,1]+x[1,2])/1000
ME
#Calculating overall accuracy
1-ME
# You need to adjust the work environment to run this code
setwd("/Users/mingyang/Desktop/SMU/File Management & Database/7330-Term-Porject/Data Set")
library(tidyverse)
#plotting and pipes
library(ggplot2)
# text mining library
library(tidytext)
#Look at data
library(visdat)
# Look at missing Data
library(naniar)
#tweets = read_csv("tweets_loc_sen0223.csv")
#tweets = data.frame(tweets)
tweets = read_csv("tweets_loc_sen0315.csv")
tweets = data.frame(tweets)
# Look at missing data
gg_miss_var(tweets)
# Look at structure of tweets
str(tweets)
# Look at TOP US STATES
tweets %>%
count(user_state,sort = TRUE) %>%
mutate(user_state = reorder(user_state, n)) %>%
na.omit()%>%
top_n(20)%>%
ggplot(aes(x=user_state,y=n))+
geom_col()+
coord_flip()+
labs(x = "Count",y="Location",title="Where Twitter users are from - unique State")
# Look at TOP WORLD CITIES
tweets %>%
count(user_city,sort = TRUE) %>%
mutate(user_city = reorder(user_city, n)) %>%
na.omit()%>%
top_n(20)%>%
ggplot(aes(x=user_city,y=n))+
geom_col()+
coord_flip()+
labs(x = "Count",y="Location",title="Where Twitter users are from - unique City")
# Look at TOP Countries
tweets %>%
count(user_country,sort = TRUE) %>%
mutate(user_country = reorder(user_country, n)) %>%
na.omit()%>%
top_n(20)%>%
ggplot(aes(x=user_country,y=n))+
geom_col()+
coord_flip()+
labs(x = "Count",y="Location",title="Where Twitter users are from - unique Country")
# Make Sentiment into factor
tweets$sentiment = as.factor(tweets$sentiment)
# Look at USA sentiment
usa_sentiment = tweets %>% filter(user_country=="UNITED STATES")%>%select(user_country,sentiment)
ggplot(data = usa_sentiment) +
geom_bar(mapping = aes(x = sentiment, y = stat(prop), group = 1))+
ggtitle("United States Pfizer Vaccine Sentiment")
# Look at Sentiment in US by States
tweets %>% filter(!is.na(user_state)) %>%
select(user_state,sentiment) %>%
ggplot(aes(user_state, ..count..))+
geom_bar(aes(fill=sentiment))+coord_flip()+ggtitle("Sentiment across all US States")
# Look at Sentiment in the world by countries
tweets %>% filter(!is.na(user_country)) %>%
filter(user_country=="UNITED STATES"|user_country=="UNITED KINGDOM"|
user_country=="CANADA"|user_country=="INDIA"|
user_country=="UNITED ARAB EMIRATES"|user_country=="IRELAND"|
user_country=="FRANCE"|user_country=="GERMANY")%>%
mutate(user_country = fct_relevel(user_country,
"GERMANY", "FRANCE", "IRELAND",
"UNITED ARAB EMIRATES", "INDIA", "CANADA",
"UNITED KINGDOM", "UNITED STATES")) %>%
select(user_country,sentiment) %>%
ggplot(aes(user_country, ..count..))+
geom_bar(aes(fill=sentiment))+coord_flip()+
ggtitle("Sentiment across top 8 country by tweets")
# Look at Sentiment in the US by states - top 8 states tweets
tweets %>% filter(!is.na(user_state)) %>%
filter(user_state=="CALIFORNIA"|user_state=="NEW YORK"|
user_state=="TEXAS"|user_state=="FLORIDA"|
user_state=="WASHINGTON"|user_state=="ILLINOIS"|
user_state=="GEORGIA"|user_state=="MICHIGAN")%>%
mutate(user_state = fct_relevel(user_state,
"MICHIGAN", "GEORGIA", "ILLINOIS",
"WASHINGTON", "FLORIDA", "TEXAS",
"NEW YORK", "CALIFORNIA")) %>%
select(user_state,sentiment) %>%
ggplot(aes(user_state, ..count..))+
geom_bar(aes(fill=sentiment))+coord_flip()+
ggtitle("Sentiment across top 8 US states by tweets")
# Look at Sentiment for top 8 cities by tweets
tweets %>% filter(!is.na(user_city)) %>%
filter(user_city=="LONDON"|user_city=="NEW YORK"|
user_city=="DUBAI"|user_city=="NEW DELHI"|
user_city=="TORONTO"|user_city=="MUMBAI"|
user_city=="GLASGOW"|user_city=="CALIFORNIA")%>%
mutate(user_city = fct_relevel(user_city,
"CALIFORNIA", "GLASGOW", "MUMBAI",
"TORONTO", "NEW DELHI", "DUBAI",
"NEW YORK", "LONDON")) %>%
select(user_city,sentiment) %>%
ggplot(aes(user_city, ..count..))+
geom_bar(aes(fill=sentiment))+coord_flip()+
ggtitle("Sentiment across top 8 world cities by tweets")
tweets = read_csv("tweets_loc_sen0223.csv")
#tweets = data.frame(tweets)
#tweets = read_csv("tweets_loc_sen0315.csv")
tweets = data.frame(tweets)
# Look at missing data
gg_miss_var(tweets)
# Look at structure of tweets
str(tweets)
# Look at TOP Countries
tweets %>%
count(user_country,sort = TRUE) %>%
mutate(user_country = reorder(user_country, n)) %>%
na.omit()%>%
top_n(20)%>%
ggplot(aes(x=user_country,y=n))+
geom_col()+
coord_flip()+
labs(x = "Count",y="Location",title="Where Twitter users are from - unique Country")
